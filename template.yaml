AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  rad

  Sample SAM Template for rad

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
  CommitHash:
    Type: String

Globals:
  Function:
    Timeout: 15
    Tracing: Active
    Environment:
      Variables:
        ASSET_PATH: !Sub "https://${AssetDistribution.DomainName}/${CommitHash}"
        SESSION_TABLE: !Ref SessionTable
  Api:
    TracingEnabled: true
Resources:
  AssetBucket:
    Type: AWS::S3::Bucket
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
  AssetBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AssetBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            - Action:
              - 's3:GetObject'
              Effect: Allow
              Resource: !Sub "${AssetBucket.Arn}/*"
              Principal:
                Service: "cloudfront.amazonaws.com"
              Condition:
                StringEquals:
                  "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${AssetDistribution}"
  AssetDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        PriceClass: PriceClass_100
        Origins:
          - DomainName: !GetAtt AssetBucket.RegionalDomainName
            Id: s3-assets
            OriginAccessControlId: !GetAtt AssetDistributionOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultCacheBehavior:
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Cache disabled managed policy
          ViewerProtocolPolicy: https-only
          TargetOriginId: s3-assets
  AssetDistributionOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: s3-assets
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  ApiGatewayCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: report-a-death.dev.account.gov.uk
      DomainValidationOptions:
        - DomainName: report-a-death.dev.account.gov.uk
          HostedZoneId:
            Fn::ImportValue: DevHostedZoneId
      ValidationMethod: DNS
      CertificateTransparencyLoggingPreference: ENABLED

  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Domain:
        DomainName: report-a-death.dev.account.gov.uk
        CertificateArn: !Ref ApiGatewayCertificate
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId:
            Fn::ImportValue: DevHostedZoneId
          EvaluateTargetHealth: true
          IpV6: true

  HelloFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/pages/hello/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        HelloGet:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /hello
            Method: get
        HelloPost:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /hello
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  WorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/pages/world/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /world
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts
  StartFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/pages/start/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts
  DemoFunction:
    Type: AWS::Serverless::Function
    Connectors:
      SessionTable:
        Properties:
          Destination:
            Id: SessionTable
          Permissions:
            - Read
            - Write
    Properties:
      CodeUri: src/pages/demo/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
      - x86_64
      Events:
        GetDemo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /demo
            Method: get
        PostDemo:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /demo
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        External:
        - "@aws-sdk/client-dynamodb"
        Sourcemap: true
        EntryPoints:
        - app.ts
  CheckAnswersFunction:
    Type: AWS::Serverless::Function
    Connectors:
      SessionTable:
        Properties:
          Destination:
            Id: SessionTable
          Permissions:
            - Read
            - Write
    Properties:
      CodeUri: src/pages/check-answers/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Events:
        HelloWorld:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /check-answers
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        External:
          - "@aws-sdk/client-dynamodb"
        Sourcemap: true
        EntryPoints:
          - app.ts

  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello"
  AssetBucketName:
    Value: !Ref AssetBucket