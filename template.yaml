AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  rad

  Sample SAM Template for rad

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - local
      - dev
      - build
      - staging
      - integration
      - prod
  CommitHash:
    Type: String
    Default: COMMITHASHTOREPLACE
  CodeSigningConfigArn:
    Type: String
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Default: "none"

Mappings:
  EnvironmentConfiguration:
    dev:
      domainName: report-a-death.dev.account.gov.uk
      assetDomainName: d93qbl2oxo1rz.cloudfront.net
    build:
      domainName: report-a-death.build.account.gov.uk
      assetDomainName: example.com
    staging:
      domainName: report-a-death.staging.account.gov.uk
      assetDomainName: example.com
    integration:
      domainName: report-a-death.integration.account.gov.uk
      assetDomainName: example.com
    production:
      domainName: report-a-death.account.gov.uk
      assetDomainName: example.com

Conditions:
  NonProd: !Not [!Equals [!Ref Environment, prod]]
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - none
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Globals:
  Function:
    Timeout: 15
    Tracing: Active
    Architectures:
      - arm64
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    Environment:
      Variables:
        ASSET_PATH:
          Fn::Sub:
            - "https://${AssetDistributionDomain}/${CommitHash}"
            - AssetDistributionDomain:
                Fn::FindInMap:
                  - EnvironmentConfiguration
                  - !Ref Environment
                  - assetDomainName
        SESSION_TABLE: !Ref SessionTable
        DYNAMO_DB_ENDPOINT_OVERRIDE: ""
        ENVIRONMENT: !Ref Environment
  Api:
    TracingEnabled: true

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      AlwaysDeploy: true # Resolves an issue where changes to default responses aren't picked up
      Variables:
        Environment: !Ref Environment
      Auth:
        DefaultAuthorizer: !Ref Environment
        Authorizers:
          dev:
            FunctionArn: !GetAtt NonProdAuthoriserFunction.Arn
            FunctionPayloadType: TOKEN
          build:
            FunctionArn: !GetAtt NonProdAuthoriserFunction.Arn
            FunctionPayloadType: TOKEN
          staging:
            FunctionArn: !GetAtt NonProdAuthoriserFunction.Arn
            FunctionPayloadType: TOKEN
          integration:
            FunctionArn: !GetAtt NonProdAuthoriserFunction.Arn
            FunctionPayloadType: TOKEN
          prod:
            FunctionArn: !GetAtt ProdAuthoriserFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              StageVariables:
                - Environment
          local:
            FunctionArn: !GetAtt ProdAuthoriserFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              StageVariables:
                - Environment
      Domain:
        DomainName: !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ]
        CertificateArn:
          Fn::ImportValue: CertificateArn
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId:
            Fn::ImportValue: HostedZoneId
          EvaluateTargetHealth: true
          IpV6: true

  NonProdAuthoriserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/authoriser/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  ProdAuthoriserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/prod-authoriser/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  UnauthorizedErrorResponse:
    Condition: NonProd
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGateway
      ResponseType: UNAUTHORIZED
      ResponseParameters:
        "gatewayresponse.header.WWW-Authenticate": "'Basic'"
      StatusCode: "401"


  4xxErrorResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGateway
      ResponseType: DEFAULT_4XX
      ResponseTemplates:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: 'gateway-error.yaml'

  5xxErrorResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGateway
      ResponseType: DEFAULT_5XX
      ResponseTemplates:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: 'gateway-error.yaml'

  StartFunction:
    Type: AWS::Serverless::Function
    Connectors:
      SessionTable:
        Properties:
          Destination:
            Id: SessionTable
          Permissions:
            - Read
            - Write
    Properties:
      CodeUri: src/pages/start/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: get
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
        Sourcemap: true
        EntryPoints:
          - app.ts
  DemoFunction:
    Type: AWS::Serverless::Function
    Connectors:
      SessionTable:
        Properties:
          Destination:
            Id: SessionTable
          Permissions:
            - Read
            - Write
    Properties:
      CodeUri: src/pages/demo/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /demo
            Method: get
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /demo
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        External:
        - "@aws-sdk/client-dynamodb"
        - "@aws-sdk/lib-dynamodb"
        Sourcemap: true
        EntryPoints:
        - app.ts

  CheckAnswersFunction:
    Type: AWS::Serverless::Function
    Connectors:
      SessionTable:
        Properties:
          Destination:
            Id: SessionTable
          Permissions:
            - Read
            - Write
    Properties:
      CodeUri: src/pages/check-answers/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /check-answers
            Method: get
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /check-answers
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
        Sourcemap: true
        EntryPoints:
          - app.ts

  SubmittedFunction:
    Type: AWS::Serverless::Function
    Connectors:
      SessionTable:
        Properties:
          Destination:
            Id: SessionTable
          Permissions:
            - Read
    Properties:
      CodeUri: src/pages/submitted/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /submitted
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
        Sourcemap: true
        EntryPoints:
          - app.ts

  NoSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/pages/no-session/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /error/no-session
            Method: any
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  NotFoundFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/pages/not-found/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /{proxy+}
            Method: any
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello"