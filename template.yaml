AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  rad

  Sample SAM Template for rad

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - local
      - dev
      - build
      - staging
      - integration
      - prod
  CommitHash:
    Type: String
    Default: COMMITHASHTOREPLACE
  CodeSigningConfigArn:
    Type: String
    Description: The ARN of the Code Signing Config to use, provided by the deployment pipeline
    Default: "none"
  PermissionsBoundary:
    Type: String
    Description: The ARN of the permissions boundary to apply to any role created by the template
    Default: "none"
  VpcStackName:
    Type: String
    Description: The name of the stack used to create the VPC
Mappings:
  EnvironmentConfiguration:
    dev:
      domainName: report-a-death.dev.account.gov.uk
    build:
      domainName: report-a-death.build.account.gov.uk
    staging:
      domainName: report-a-death.staging.account.gov.uk
    integration:
      domainName: report-a-death.integration.account.gov.uk
    production:
      domainName: report-a-death.account.gov.uk

Conditions:
  NonProd: !Not [!Equals [!Ref Environment, prod]]
  UseCodeSigning:
    Fn::Not:
      - Fn::Equals:
          - !Ref CodeSigningConfigArn
          - none
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"

Globals:
  Function:
    Timeout: 15
    Tracing: Active
    Architectures:
      - arm64
    CodeSigningConfigArn: !If
      - UseCodeSigning
      - !Ref CodeSigningConfigArn
      - !Ref AWS::NoValue
    PermissionsBoundary: !If
      - UsePermissionsBoundary
      - !Ref PermissionsBoundary
      - !Ref AWS::NoValue
    VpcConfig:
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup
    Environment:
      Variables:
        ASSET_PATH: !Sub "https://${AssetDistribution.DomainName}/${CommitHash}"
        SESSION_TABLE: !Ref SessionTable
        DYNAMO_DB_ENDPOINT_OVERRIDE: ""
        ENVIRONMENT: !Ref Environment
  Api:
    TracingEnabled: true

Resources:
  AssetBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedMethods:
              - GET
            AllowedOrigins:
              - '*'
  AssetBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AssetBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
            - Action:
              - 's3:GetObject'
              Effect: Allow
              Resource: !Sub "${AssetBucket.Arn}/*"
              Principal:
                Service: "cloudfront.amazonaws.com"
              Condition:
                StringEquals:
                  "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${AssetDistribution}"
  AssetDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      # checkov:skip=CKV_AWS_68: No WAF needed on a static asset distribution
      DistributionConfig:
        Enabled: true
        PriceClass: PriceClass_100
        ViewerCertificate:
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        Logging:
          Bucket: !Ref LogsBucket
          IncludeCookies: false
          Prefix: asset-distribution/
        Origins:
          - DomainName: !GetAtt AssetBucket.RegionalDomainName
            Id: s3-assets
            OriginAccessControlId: !GetAtt AssetDistributionOriginAccessControl.Id
            S3OriginConfig:
              OriginAccessIdentity: ""
        DefaultCacheBehavior:
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Cache disabled managed policy
          ViewerProtocolPolicy: https-only
          TargetOriginId: s3-assets
      Tags:
        - CheckovRulesToSkip: CKV_AWS_68
  AssetDistributionOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: s3-assets
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      # checkov:skip=CKV_AWS_18: The logs bucket doesn't need logging.
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda Security Group permissions ruleset
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VpcId
      SecurityGroupEgress:
        - DestinationSecurityGroupId:
            Fn::ImportValue: !Sub ${VpcStackName}-AWSServicesEndpointSecurityGroupId
          Description: Allow outbound traffic to vpc endpoints
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

  MainKmsKey:
    Type: AWS::KMS::Key
    Properties:
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: "*"
          - Effect: Allow
            Principal:
              Service: !Sub dynamodb.${AWS::Region}.amazonaws.com
            Action:
              - kms:Encrypt
              - kms:Decrypt
            Resource: "*"
            Condition:
              StringEquals:
                kms:callerAccount: !Ref AWS::AccountId
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      # checkov:skip=CKV_AWS_120: Disable caching: RAD-407 to review this decision
      StageName: Prod
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        Format: >-
          {
            "requestId":"$context.requestId",
            "requestTime":"$context.requestTime",
            "httpMethod":"$context.httpMethod",
            "path":"$context.path",
            "routeKey":"$context.routeKey",
            "status":"$context.status",
            "protocol":"$context.protocol",
            "responseLatency":"$context.responseLatency",
            "responseLength":"$context.responseLength"
          }
      TracingEnabled: true
      Variables:
        Environment: !Ref Environment
      Auth:
        DefaultAuthorizer: !Ref Environment
        Authorizers:
          dev:
            FunctionArn: !GetAtt NonProdAuthoriserFunction.Arn
            FunctionPayloadType: TOKEN
          build:
            FunctionArn: !GetAtt NonProdAuthoriserFunction.Arn
            FunctionPayloadType: TOKEN
          staging:
            FunctionArn: !GetAtt NonProdAuthoriserFunction.Arn
            FunctionPayloadType: TOKEN
          integration:
            FunctionArn: !GetAtt NonProdAuthoriserFunction.Arn
            FunctionPayloadType: TOKEN
          prod:
            FunctionArn: !GetAtt ProdAuthoriserFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              StageVariables:
                - Environment
          local:
            FunctionArn: !GetAtt ProdAuthoriserFunction.Arn
            FunctionPayloadType: REQUEST
            Identity:
              StageVariables:
                - Environment
      Domain:
        DomainName: !FindInMap [ EnvironmentConfiguration, !Ref Environment, domainName ]
        CertificateArn:
          Fn::ImportValue: CertificateArn
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId:
            Fn::ImportValue: HostedZoneId
          EvaluateTargetHealth: true
          IpV6: true
  ApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${AWS::StackName}-access-logs
      RetentionInDays: 14

  NonProdAuthoriserFunction:
    Type: AWS::Serverless::Function
    Properties:
      # checkov:skip=CKV_AWS_115: Not yet ready to set concurrent execution limit
      # checkov:skip=CKV_AWS_116: No DLQ needed for these functions
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      CodeUri: src/authoriser/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  ProdAuthoriserFunction:
    Type: AWS::Serverless::Function
    Properties:
      # checkov:skip=CKV_AWS_115: Not yet ready to set concurrent execution limit
      # checkov:skip=CKV_AWS_116: No DLQ needed for these functions
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      CodeUri: src/prod-authoriser/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  UnauthorizedErrorResponse:
    Condition: NonProd
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGateway
      ResponseType: UNAUTHORIZED
      ResponseParameters:
        "gatewayresponse.header.WWW-Authenticate": "'Basic'"
      StatusCode: "401"


  4xxErrorResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGateway
      ResponseType: DEFAULT_4XX
      ResponseTemplates:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: 'gateway-error.yaml'

  5xxErrorResponse:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      RestApiId: !Ref ApiGateway
      ResponseType: DEFAULT_5XX
      ResponseTemplates:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: 'gateway-error.yaml'

  StartFunction:
    Type: AWS::Serverless::Function
    Connectors:
      SessionTable:
        Properties:
          Destination:
            Id: SessionTable
          Permissions:
            - Read
            - Write
    Properties:
      # checkov:skip=CKV_AWS_115: Not yet ready to set concurrent execution limit
      # checkov:skip=CKV_AWS_116: No DLQ needed for these functions
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      CodeUri: src/pages/start/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: get
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
        Sourcemap: true
        EntryPoints:
          - app.ts
  DemoFunction:
    Type: AWS::Serverless::Function
    Connectors:
      SessionTable:
        Properties:
          Destination:
            Id: SessionTable
          Permissions:
            - Read
            - Write
    Properties:
      # checkov:skip=CKV_AWS_115: Not yet ready to set concurrent execution limit
      # checkov:skip=CKV_AWS_116: No DLQ needed for these functions
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      CodeUri: src/pages/demo/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /demo
            Method: get
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /demo
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        External:
        - "@aws-sdk/client-dynamodb"
        - "@aws-sdk/lib-dynamodb"
        Sourcemap: true
        EntryPoints:
        - app.ts

  CheckAnswersFunction:
    Type: AWS::Serverless::Function
    Connectors:
      SessionTable:
        Properties:
          Destination:
            Id: SessionTable
          Permissions:
            - Read
            - Write
    Properties:
      # checkov:skip=CKV_AWS_115: Not yet ready to set concurrent execution limit
      # checkov:skip=CKV_AWS_116: No DLQ needed for these functions
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      CodeUri: src/pages/check-answers/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /check-answers
            Method: get
        Post:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /check-answers
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
        Sourcemap: true
        EntryPoints:
          - app.ts

  SubmittedFunction:
    Type: AWS::Serverless::Function
    Connectors:
      SessionTable:
        Properties:
          Destination:
            Id: SessionTable
          Permissions:
            - Read
    Properties:
      # checkov:skip=CKV_AWS_115: Not yet ready to set concurrent execution limit
      # checkov:skip=CKV_AWS_116: No DLQ needed for these functions
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      CodeUri: src/pages/submitted/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /submitted
            Method: get
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        External:
          - "@aws-sdk/client-dynamodb"
          - "@aws-sdk/lib-dynamodb"
        Sourcemap: true
        EntryPoints:
          - app.ts

  NoSessionFunction:
    Type: AWS::Serverless::Function
    Properties:
      # checkov:skip=CKV_AWS_115: Not yet ready to set concurrent execution limit
      # checkov:skip=CKV_AWS_116: No DLQ needed for these functions
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      CodeUri: src/pages/no-session/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /error/no-session
            Method: any
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  NotFoundFunction:
    Type: AWS::Serverless::Function
    Properties:
      # checkov:skip=CKV_AWS_115: Not yet ready to set concurrent execution limit
      # checkov:skip=CKV_AWS_116: No DLQ needed for these functions
      # checkov:skip=CKV_AWS_117: VPC settings are set globally.
      CodeUri: src/pages/not-found/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      Events:
        Get:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /{proxy+}
            Method: any
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - app.ts

  SessionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: SessionId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: SessionId
          KeyType: HASH
      SSESpecification:
        KMSMasterKeyId: !Ref MainKmsKey
        SSEEnabled: true
        SSEType: KMS

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  HelloWorldApi:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello"
  AssetBucketName:
    Value: !Ref AssetBucket
